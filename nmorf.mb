Include "mapbasic.def"

Declare Sub      Main
Declare Function BuildListOfColumns(Table As Integer) As String
Declare Function BuildListOfTables() As String
Declare Sub      CreateDialog(Table As Integer, Column As Integer, ScaleMode As Integer)
Declare Sub      UpdateDialog
Declare Function CalculateParameterSum(TableName As String, Column As Integer) As Float
Declare Function CalculateAreaSum(TableName As String) As Float
Declare Sub      CalculatePolyCentroid(GeometryObject As Object, X As Float, Y As Float)
Declare Sub      CalculateMapCentroid(TableName As String, X As Float, Y As Float)
Declare Function FindMaxMultiplier(TableName As String, Column As Integer, MaxParameter As Float, MaxArea As Float) As Float
Declare Sub      ScaleMap(TableName As String, Multiplier As Float)
Declare Sub      ScalePolygon(TMP As Object, CPOLY As Integer, POLYCENTROIdX As Float, POLYCENTROIdY As FLoat, Multiplier As Float)
Declare Function FindMaxParameter(TableName As String, Column As Integer) As Float
Declare Function FindMaxArea(TableName As String) As Float
Declare Sub      CalculatePolygonCentroid(TMP As Object, CPOLY As Integer, POLYCENTROIdX As Float, POLYCENTROIdY As FLoat)
Declare Sub      ScaleRegion(Poly As Object, Multiplier As Float)
Declare Sub      NmorfMap(TableName As String, Column As Integer, ParameterSum As Float, AreaSum As Float, MaxMultiplier As Float, ScaleMode As Integer)
Declare Function CalculateMultiplier(ByVal ParameterVal, ParameterSum, AreaVal, AreaSum As Float) As Float

Function BuildListOfTables() As String
	Dim Table As Integer
	Dim ListOfTables As String
	For Table = 1 To NumTables()
		ListOfTables = ListOfTables + TableInfo(Table, TAB_Info_NAME) + ";"
	Next
	BuildListOfTables = ListOfTables
End Function

Function BuildListOfColumns(Table As Integer) As String
	Dim Column As Integer
	Dim Return As String
	For Column = 1 To NumCols(Table)
		Return = Return + ColumnInfo (Table, "COL" + Column, COL_Info_NAME) + ";"
	Next
	BuildListOfColumns = Return
End Function

Sub CreateDialog (Table As Integer, Column As Integer, ScaleMode As Integer)
	Dialog  
		Title "Select nmorf setup"

		Control PopupMenu
			Title   BuildListOfTables()
			Into    Table
			Calling UpdateDialog
			Id      1

		Control PopupMenu
			Title   BuildListOfColumns(Table)
			Into    Column
			Id      2

		Control RadioGroup
			Title   "Разложить; Нормализовать"
			Into    ScaleMode

		Control OKBUTTON
		Control CANCELBUTTON
End Sub

Sub UpdateDialog
	Dim Table As Integer
	Table = ReadControlValue(1) 
	Alter Control 2 Title BuildListOfColumns(Table)
End Sub

Function CalculateParameterSum(TableName As String, Column As Integer) As Float
	Dim ParameterSum As Float
	Dim ColumnValue As Alias
	ColumnValue = TableName + ".COL" & Column

	Fetch First From TableName
	
	While Not EOT(TableName)
		ParameterSum = ParameterSum + ColumnValue
		Fetch Next From Tablename
	Wend
	
	CalculateParameterSum = ParameterSum
End Function

Function CalculateAreaSum(Table As String) As Float
	Dim AreaSum As Float
	Dim GeometryObject As Alias
	
	GeometryObject = Table + ".OBJ"
	Fetch First From Table

	While Not EOT(Table)
		AreaSum = AreaSum + Area (GeometryObject, "SQ KM")
		Fetch Next From Table
	Wend
	
	CalculateAreaSum = AreaSum
End Function

Function CalculateMultiplier(ByVal ParameterVal, ParameterSum, AreaVal, AreaSum As Float) As Float
	CalculateMultiplier = Sqr(ParameterVal / ParameterSum * AreaSum / AreaVal)
End Function

Function FindMaxMultiplier(Table As String, Column As Integer, ParameterSum As Float, AreaSum As Float) As Float
	Dim MaxMultiplier As Float
	Dim GeometryObject As Alias
	Dim ColumnValue As Alias

	GeometryObject = Table + ".OBJ"
	ColumnValue = Table + ".COL" & Column
	
	Fetch First From Table

	While Not EOT(Table)
		If ObjectInfo(GeometryObject, OBJ_INFO_TYPE) = OBJ_REGION Then
			Dim Multiplier As Float
			Dim AreaVal As Float
			AreaVal = Area(GeometryObject, "SQ KM")
			Multiplier = CalculateMultiplier(ColumnValue, ParameterSum, AreaVal, AreaSum)
			If Multiplier > MaxMultiplier Then
				MaxMultiplier = Multiplier
			End If
		End If
		Fetch Next From Table
	Wend

	FindMaxMultiplier = MaxMultiplier
End Function

Function FindMaxParameter(Table As String, Column As Integer) As Float
	Dim MaxParameter As Float
	Dim GeometryObject As Alias
	Dim ColumnValue As Alias

	GeometryObject = Table + ".OBJ"
	ColumnValue = Table + ".COL" & Column
	Fetch First From Table

	While Not EOT(Table)
		If ObjectInfo(GeometryObject, OBJ_INFO_TYPE) = OBJ_REGION Then
			If ColumnValue > MaxParameter Then
				MaxParameter = ColumnValue
			End If
		End If
		Fetch Next From Table
	Wend

	FindMaxParameter = MaxParameter
End Function

Function FindMaxArea(TableName As String) As Float
	Dim MaxArea As Float
	Dim GeometryObject As Alias
	GeometryObject = TableName + ".OBJ"
	Fetch First From TableName
	While Not EOT(TableName)
		If Area (GeometryObject, "SQ KM") > MaxArea Then
			MaxArea = Area (GeometryObject, "SQ KM")
		End If
		Fetch Next From TableName
	Wend
	FindMaxArea = MaxArea
End Function

Sub CalculatePolyCentroid(GeometryObject As Object, X As Float, Y As Float)
	Dim NPOLYS As Integer
	Dim CPOLY As Integer
	Dim CPOINT As Integer
	Dim NPOINTS As integer
	
	Dim POLYCENTROIdX As Float
	Dim POLYCENTROIdY As Float
	
	If ObjectInfo (GeometryObject, OBJ_Info_TYPE) = OBJ_REGION Then 
		NPOLYS = ObjectInfo (GeometryObject, OBJ_Info_NPOLYGONS)
		For CPOLY = 1 To NPOLYS
			NPOINTS = ObjectInfo (GeometryObject, OBJ_Info_NPOLYGONS + CPOLY)
			For CPOINT = 1 To NPOINTS-1
				POLYCENTROIdX = POLYCENTROIdX + ObjectNODEX (GeometryObject, CPOLY, CPOINT)
				POLYCENTROIdY = POLYCENTROIdY + ObjectNODEY (GeometryObject, CPOLY, CPOINT)
			Next
			POLYCENTROIdX = POLYCENTROIdX / NPOINTS
			POLYCENTROIdY = POLYCENTROIdY / NPOINTS
			X = X + POLYCENTROIdX
			Y = Y + POLYCENTROIdY
		Next
		X = X / NPOLYS
		Y = Y / NPOLYS
	End If
End Sub

Sub CalculateMapCentroid(Table As String, X As Float, Y As Float)
	Dim ObjColumn As Alias
	Dim GeometryObject As Object
	Dim NumPolys As Integer
	
	ObjColumn = Table + ".OBJ"
	NumPolys = 1

	Fetch First From Table
	While Not EOT(Table)
		GeometryObject = ObjColumn
		If ObjectInfo (GeometryObject, OBJ_Info_TYPE) = OBJ_REGION Then 
			Dim ObjX, ObjY As Float
			ObjX = 0
			ObjY = 0
			Call CalculatePolyCentroid(GeometryObject, ObjX, ObjY)
			X = ObjX + X
			Y = ObjY + Y
			NumPolys = NumPolys + 1
		End If
		Fetch Next From Table
	Wend
	
	X = X / NumPolys
	Y = Y / NumPolys
End Sub


Sub ScaleMap(Table As String, Multiplier As Float)	
	Dim ObjColumn As Alias
	Dim GeometryObject As Object
	Dim MapCentroidX, MapCentroidY As Float
	
	ObjColumn = Table + ".OBJ"
	Call CalculateMapCentroid(Table, MapCentroidX, MapCentroidY)

	Fetch First From Table
	While Not EOT(Table)
		GeometryObject = ObjColumn
		If ObjectInfo (GeometryObject, OBJ_Info_TYPE) = OBJ_REGION Then
			Dim CURROW As Alias
			Dim PolyCentroidX, PolyCentroidY As Float
			Dim NPOLYS, CPOLY, NPOINTS, CPOINT As Integer
			
			Dim OLDX, OLDY, NEWX, NEWY, VECX, VECY As Float
			
			NPOLYS = ObjectInfo(GeometryObject, OBJ_Info_NPOLYGONS)
			
			For CPOLY = 1 To NPOLYS
				NPOINTS = ObjectInfo(GeometryObject, OBJ_Info_NPOLYGONS + CPOLY)
				
				PolyCentroidX = 0
				PolyCentroidY = 0
				
				Call CalculatePolygonCentroid(GeometryObject, CPOLY, POLYCENTROIDX, POLYCENTROIDY)
				
				VECX = PolyCentroidX - MapCentroidX
				VECY = PolyCentroidY - MapCentroidY
				
				For CPOINT = 1 To NPOINTS-1
					OLDX = ObjectNODEX(GeometryObject, CPOLY, CPOINT)
					OLDY = ObjectNODEY(GeometryObject, CPOLY, CPOINT)
					NEWX = OldX + VECX
					NEWY = OldY + VECY
					Alter Object GeometryObject NODE SET POSITION CPOLY, CPOINT (NEWX, NEWY)
				Next
			Next
			CURROW = Table + ".ROWId"
			UPDATE Table SET OBJ = GeometryObject WHERE ROWId = CURROW
		End If
		Fetch Next From Table
	Wend
End Sub

Sub ScalePolygon(TMP As Object, CPOLY As Integer, POLYCENTROIdX As Float, POLYCENTROIdY As FLoat, Multiplier As Float)
	Dim OLDX , OLDY, NEWX, NEWY, VECX, VECY As Float
	Dim NPOINTS, CPOINT As Integer
	
	NPOINTS = ObjectInfo(TMP, OBJ_Info_NPOLYGONS + CPOLY)
	For CPOINT = 1 To NPOINTS-1
		OLDX = ObjectNODEX(TMP, CPOLY, CPOINT)
		OLDY = ObjectNODEY(TMP, CPOLY, CPOINT)
		VECX = (OLDX - POLYCENTROIdX) * Multiplier
		VECY = (OLDY - POLYCENTROIdY) * Multiplier
		NEWX = POLYCENTROIdX + VECX
		NEWY = POLYCENTROIdY + VECY
		Alter Object TMP NODE SET POSITION CPOLY, CPOINT (NEWX, NEWY)
	Next
End Sub

Sub CalculatePolygonCentroid(TMP As Object, CPOLY As Integer, POLYCENTROIdX As Float, POLYCENTROIdY As FLoat)
	Dim NPOINTS, CPOINT As Integer
	POLYCENTROIdX = 0
	POLYCENTROIdY = 0
	NPOINTS = ObjectInfo(TMP, OBJ_Info_NPOLYGONS + CPOLY)
	For CPOINT = 1 To NPOINTS-1
		POLYCENTROIdX = POLYCENTROIdX + ObjectNODEX(TMP, CPOLY, CPOINT)
		POLYCENTROIdY = POLYCENTROIdY + ObjectNODEY(TMP, CPOLY, CPOINT)
	Next
	POLYCENTROIdX = POLYCENTROIdX / NPOINTS
	POLYCENTROIdY = POLYCENTROIdY / NPOINTS
End Sub

Sub ScaleRegion(Tmp As Object, Multiplier As Float)
	Dim CurRow As Alias
	Dim NPolys, CPoly As Integer
	Dim POLYCENTROIdVECX, POLYCENTROIdVECY, POLYCENTROIDX, PolyCentroidY As Float

	NPOLYS = ObjectInfo(TMP, OBJ_Info_NPOLYGONS)
	For CPOLY = 1 To NPOLYS
		' check for poly
		Call CalculatePolygonCentroid(TMP, CPOLY, POLYCENTROIDX, POLYCENTROIDY)
		Call ScalePolygon(TMP, CPOLY, POLYCENTROIDX, POLYCENTROIDY, Multiplier)
	Next
End Sub

Sub NmorfMap(Table As String, ColumnNum As Integer, ParameterSum As Float, AreaSum As Float, MaxMultiplier As Float, ScaleMode As Integer)
	Dim Column, ObjColumn, CurRow As Alias
	Dim Tmp As Object
	Dim Multiplier As Float
	Dim NPolys As Integer
	
	Column = Table + ".COL" + STR$(ColumnNum)
	ObjColumn = Table + ".OBJ"

	Fetch First From Table
	While Not EOT(Table)
		TMP = OBJCOLUMN
		If ObjectInfo(Tmp, OBJ_Info_TYPE) = OBJ_REGION Then
			
			Multiplier = Sqr (Column / ParameterSum * AreaSum / Area (TMP, "SQ KM") )
			
			If ScaleMode = 1 Then
				Call ScaleMap(Table, MaxMultiplier)
			End If
			
			If ScaleMode = 2 Then
				Multiplier =  Multiplier / MaxMultiplier
			End If	
			
			Call ScaleRegion(TMP, Multiplier)
			
			CURROW = Table + ".ROWId"
			UPDATE Table SET OBJ = TMP WHERE ROWId = CURROW
		End If
		Fetch Next From Table
	Wend
End Sub

Sub Main
	Dim TableNum, ColumnNum, ScaleMode As Integer
	
	TableNum = 1
	ColumnNum = 1
	ScaleMode = 1

	Call CreateDialog(TableNum, ColumnNum, ScaleMode)

	If CommandInfo(CMD_INFO_DLG_OK) Then
		Dim TableName As String
		Dim ParameterSum, AreaSum, MaxParameter, MaxArea, MaxMultiplier As Float
		
		TableName = TABLEInfo(TableNum, TAB_Info_NAME)
		ParameterSum = CalculateParameterSum(TableName, ColumnNum)
		AreaSum = CalculateAreaSum(TableName)
		MaxParameter = FindMaxParameter(TableName, ColumnNum)	
		MaxArea = FindMaxArea(TableName)
		MaxMultiplier = FindMaxMultiplier(TableName, ColumnNum, ParameterSum, AreaSum)
		
		Call NmorfMap(TableName, ColumnNum, ParameterSum, AreaSum, MaxMultiplier, ScaleMode)
	End If
End Sub

